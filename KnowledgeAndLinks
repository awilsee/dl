Dog datasets:
Standord Dogs Dataset of ImageNet (most pre-trained CNN use ImageNet)
http://vision.stanford.edu/aditya86/ImageNetDogs/

dogImages (-> images are different to ImageNet):
https://s3-us-west-1.amazonaws.com/udacity-aind/dog-project/dogImages.zip

___________________


General Informations and Tutorials:
Videos CNN:
Building and Deploying Deep Learning Applications with TensorFlow (Overview, Creating, Training, Exporting, Visualize)
https://www.lynda.com/Google-TensorFlow-tutorials/Building-Deploying-Applications-TensorFlow/601800-2.html

How Convolutional Neural Networks work - Brandon Rohrer
https://www.youtube.com/watch?v=FmpDIaiMIeA
Deep Learning Demystified - Brandon Rohrer
https://www.youtube.com/watch?v=Q9Z20HCPnww

But what *is* a Neural Network? | Chapter 1, deep learning - 3Blue1Brown
https://www.youtube.com/watch?v=aircAruvnKk&t=990s


Written stuff:
Creating an image classifier on Android using TensorFlow (part 1 & 2 & 3)
https://medium.com/@daj/creating-an-image-classifier-on-android-using-tensorflow-part-1-513d9c10fa6a

ResNet, AlexNet, VGG, Inception: Understanding various architectures of Convolutional Networks
http://cv-tricks.com/cnn/understand-resnet-alexnet-vgg-inception/
Quick complete Tensorflow tutorial to understand and run Alexnet, VGG, Inceptionv3, Resnet and squeezeNet networks
http://cv-tricks.com/tensorflow-tutorial/understanding-alexnet-resnet-squeezenetand-running-on-tensorflow/
Tensorflow Tutorial 2: image classifier using convolutional neural network
http://cv-tricks.com/tensorflow-tutorial/training-convolutional-neural-network-for-image-classification/
A quick complete tutorial to save and restore Tensorflow models
http://cv-tricks.com/tensorflow-tutorial/save-restore-tensorflow-models-quick-complete-tutorial/
Freeze Tensorflow models and serve on web
http://cv-tricks.com/how-to/freeze-tensorflow-models/
-> this above are good Tutorials with Code, I think (not read all of it really exactly)

A Beginner's Guide To Understanding Convolutional Neural Networks
https://adeshpande3.github.io/adeshpande3.github.io/A-Beginner%27s-Guide-To-Understanding-Convolutional-Neural-Networks/

A Guide to TF Layers: Building a Convolutional Neural Network
https://www.tensorflow.org/tutorials/layers

How to Retrain Inception's Final Layer for New Categories
https://www.tensorflow.org/tutorials/image_retraining

Building Convolutional Neural Networks with Tensorflow
http://ataspinar.com/2017/08/15/building-convolutional-neural-networks-with-tensorflow

Deep learning - (part of a book)
http://neuralnetworksanddeeplearning.com/chap6.html

___________________

Caffee CNN Models
https://github.com/BVLC/caffe/tree/master/models

Caffe to TensorFlow
-> Convert Caffe models (ResNet, VGG16, GoogLeNet (Inception), AlexNet) to TensorFlow.
  -> Example doesn't work correctly
https://github.com/ethereon/caffe-tensorflow

Converted Models -> pre-trained Models (GoogLeNet, ResNet, VGG16)
http://www.deeplearningmodel.net/

___________________

TensorFlow-Slim image classification model library
https://github.com/tensorflow/models/tree/master/research/slim
-> TF-slim is a new lightweight high-level API of TensorFlow

-> preTrained Models download and Fine-tuning (retraining)
https://github.com/tensorflow/models/tree/master/research/slim

___________________

TensorFlow Android Camera Demo App (also precompiled version available):
https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/android
https://ci.tensorflow.org/view/Nightly/job/nightly-android/lastStableBuild/
-> with TensorFlow Android Inference Interface
-> with ipy-Notebook

___________________


TensorFlow Model Benchmark Tool
bazel build -c opt --crosstool_top=//external:android/crosstool  --cpu=armeabi-v7a --host_crosstool_top=@bazel_tools//tools/cpp:toolchain tensorflow/tools/benchmark:benchmark_model

adb shell "/sdcard/Download/benchmark_model --graph=/sdcard/Download/tensorflow_inception_graph.pb --input_layer="input:0" --input_layer_shape="1,224,224,3" --input_layer_type="float" --output_layer="output:0"

==> fails
Download precompiled File -> need root-priviledge to run

___________________

TensorFlow Lite Vs TensorFlow Mobile
Lite is newer, smaller, fewer dependencies and better performance. Not all operators and use cases are included.
In Lite at the moment only Inception-V3 or MobileNet fully supported
https://www.tensorflow.org/mobile/

Inception-V3 vs MobileNet
-Inception more accurate
-MobileNet smaller files, faster 

TensorFlow Lite Quick Start (included preTrained Models, retraining, ...)
https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite

TensorFlow Lite Retraining CodeLab
https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/#0

-> demo app with CameraClassifier
https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite/java/demo


Another TensorFlowLiteApp
http://androidkt.com/image-classify-tensorflow-lite/

___________________

Android Studio Install:
https://developer.android.com/studio/install.html

Bazel install on Ubuntu:
https://docs.bazel.build/versions/master/install-ubuntu.html

___________________

Several Specs of hardware:
-Raspberry Pi 3:
 -Quad Core 1.2GHz Broadcom BCM2837 64bit CPU
 -1GB RAM
-Moto X (2014)
 -Qualcomm MSM8974AC Snapdragon 801  Quad-core 2.5 GHz 32-bit (ARMv7-ISA kompatibel)
 -2GB RAM
 -Android 6.0 (API 23)

___________________

FÃ¼r die FaceID Idee vom Lorenzo:
-> findet man nicht soo viel
https://github.com/Joisar/LockScreenApp#lockscreenapp
http://playingwithandroid.blogspot.de/2012/07/making-customize-lock-screen.html

___________________

Retraining:
https://www.tensorflow.org/tutorials/image_retraining
1. first few steps clear:
!WATCH OUT: https://stackoverflow.com/questions/41293077/how-to-compile-tensorflow-with-sse4-2-and-avx-instructions
--> Take bazel build --config opt --copt=-msse4.2 tensorflow/examples/image_retraining:retrain
--> enables Simd, you'll get an error if not use
--> Bottlenecks, Training with output: cross entropy, validation accuracy, training accuracy
--> Use retrained model with:
bazel-bin/tensorflow/examples/label_image/label_image --graph=/tmp/output_graph.pb --labels=/tmp/output_labels.txt --output_layer=final_result --image=$HOME/flower_photos/daisy/21652746_cc379e0eea_m.jpg --input_layer=Mul
!WATCH OUT: specify input_layer with Mul

2. Optimize for inference
bazel build tensorflow/python/tools:optimize_for_inference

bazel-bin/tensorflow/python/tools/optimize_for_inference --input=/tmp/output_graph.pb --output=/tmp/optimized_graph.pb --input_names="Mul" --output_names="final_result" --frozen_graph=True

3. Instead of freeze graph -> transform graph
bazel build tensorflow/tools/graph_transforms:transform_graph
bazel-bin/tensorflow/tools/graph_transforms/transform_graph --in_graph=/tmp/optimized_graph.pb --out_graph=/tmp/frozen_graph.pb --inputs='Mul:0' --outputs='final_result' --transforms='
strip_unused_nodes(type=float, shape="1,299,299,3")
remove_nodes(op=Identity, op=CheckNumerics)
fold_old_batch_norms
'

(2. freeze graph
not tested: freeze with bazel:
https://www.tensorflow.org/mobile/prepare_models

bazel build tensorflow/python/tools:freeze_graph)


--> on our use case: visit -->
https://github.com/tensorflow/models/tree/master/research/inception

for tensorflow lite: 
https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite

TensorFlow Lite:
1. extern variables
2. script -> retrain
3. freeze
4. convert:
-> tensorboard (get by retraining)
-> dimension Mul: Sub_1 als input_shapes bei toco
--> input_arrays=input

after shutdown:
- run retrainer by 
bazel-bin/tensorflow/examples/image_retraining/retrain --image_dir ~/flower_photos
(to copy files in tmp and run model)

for tensorflow from python: 
1.
curl http://download.tensorflow.org/example_images/flower_photos.tgz \
    | tar xz -C tf_files
2. 
IMAGE_SIZE=224
ARCHITECTURE="inception_v3"
3.
python -m scripts.retrain   --bottleneck_dir=tf_files/bottlenecks   --how_many_training_steps=500   --model_dir=tf_files/models/   --summaries_dir=tf_files/training_summaries/"inception_v3"   --output_graph=tf_files/retrained_graph.pb   --output_labels=tf_files/retrained_labels.txt   --architecture="inception_v3"   --image_dir=tf_files/flower_photos
4. 
python -m scripts.label_image     --graph=tf_files/retrained_graph.pb      --image=tf_files/flower_photos/daisy/21652746_cc379e0eea_m.jpg --input_layer=Mul
5. Optimze for inference
python -m tensorflow.python.tools.optimize_for_inference   --input=tf_files/retrained_graph.pb   --output=tf_files/optimized_graph.pb   --input_names="Mul"   --output_names="final_result"
6. Still working after removing unnecessary nodes?
python -m scripts.label_image   --graph=tf_files/retrained_graph.pb  --image=tf_files/flower_photos/daisy/3475870145_685a19116d.jpg --input_layer=Mul
7. now freeze graph - python file missing in tensorflow for poets



__________________-----

Allgemein wohl sehr gute Tensnorflow Tutorials with Save/restore, inception, transferLearning, fineTuning,..
https://github.com/Hvass-Labs/TensorFlow-Tutorials
